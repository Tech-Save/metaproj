//Auto generated with MetaApi https://github.com/exyzzy/metaapi
package << .Package >>

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"reflect"
	"strings"
	"testing"
	"time"
)

var testDb *sql.DB
var configdb map[string]interface{}
const testDbName = "test<< .FilePrefix >>"

// ======= helpers

//assumes a configlocaldb.json file as:
//{
//    "Host": "localhost",
//    "Port": "5432",
//    "User": "dbname",
//    "Pass": "dbname",
//    "Name": "dbname",
//    "SSLMode": "disable"
//}
func loadConfig() {
	fmt.Println("  loadConfig")
	file, err := os.Open("configlocaldb.json")
	if err != nil {
		log.Panicln("Cannot open configlocaldb file", err.Error())
	}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&configdb)
	if err != nil {
		log.Panicln("Cannot get local configurationdb from file", err.Error())
	}
}

func createDb(db *sql.DB, dbName string, owner string) (err error) {
	ss := fmt.Sprintf("CREATE DATABASE %s OWNER %s", dbName, owner)
	fmt.Println("  " + ss)
	_, err = db.Exec(ss)
	return
}

func setTzDb(db *sql.DB) (err error) {
	ss := fmt.Sprintf("SET TIME ZONE UTC")
	fmt.Println("  " + ss)
	_, err = db.Exec(ss)
	return
}

func dropDb(db *sql.DB, dbName string) (err error) {
	ss := fmt.Sprintf("DROP DATABASE %s", dbName)
	fmt.Println("  " + ss)
	_, err = db.Exec(ss)
	return
}

func rowExists(db *sql.DB, query string, args ...interface{}) (exists bool, err error) {
	query = fmt.Sprintf("SELECT EXISTS (%s)", query)
	fmt.Println("  " + query)
	err = db.QueryRow(query, args...).Scan(&exists)
	return
}

func tableExists(db *sql.DB, table string) (valid bool, err error) {

	valid, err = rowExists(db, "SELECT 1 FROM pg_tables WHERE tablename = $1", table)
	return
}

func initTestDb() (err error) {
	loadConfig()
	psqlInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s "+
		"sslmode=%s", configdb["Host"], configdb["Port"], configdb["User"], configdb["Pass"], configdb["SSLMode"])
	testDb, err = sql.Open("postgres", psqlInfo)
	return
}

func TestMain(m *testing.M) {
	//test setup
	err := initTestDb()
	if err != nil {
		log.Panicln("cannot initTestDb ", err.Error())
	}

	err = createDb(testDb, testDbName, configdb["User"].(string))
	if err != nil {
		log.Panicln("cannot CreateDb ", err.Error())
	}

	err = setTzDb(testDb)
	if err != nil {
		log.Panicln("cannot setTzDb ", err.Error())
	}

	//run tests
	exitVal := m.Run()

	//test teardown
	err = dropDb(testDb, testDbName)
	if err != nil {
		log.Panicln("cannot DropDb ", err.Error())
	}
	os.Exit(exitVal)
}

type compareType func(interface{}, interface{}) bool

func noCompare(result, expect interface{}) bool {
	fmt.Printf("  noCompare: %v, %v -  %T, %T \n", result, expect, result, expect)
	return (true)
}

func defaultCompare(result, expect interface{}) bool {
	fmt.Printf("  defaultCompare: %v, %v -  %T, %T \n", result, expect, result, expect)
	return (result == expect)
}

func jsonCompare(result, expect interface{}) bool {
	fmt.Printf("  jsonCompare: %v, %v -  %T, %T \n", result, expect, result, expect)

	//json fields can be any order after db return, so read into map[string]interface and look up
	resultMap := make(map[string]interface{})
	err := json.Unmarshal([]byte(result.(string)), &resultMap)
	if err != nil {
		log.Panic(err)
	}
	expectMap := make(map[string]interface{})
	err = json.Unmarshal([]byte(expect.(string)), &expectMap)
	if err != nil {
		log.Panic(err)
	}

	for k, v := range expectMap {
		if v != resultMap[k] {
			fmt.Printf("Key: %v, Result: %v, Expect: %v", k, resultMap[k], v)
			return false
		}
	}
	return true
}

func stringCompare(result, expect interface{}) bool {

	resultJson, err := json.Marshal(result)
	if err != nil {
		log.Panic(err)
	}
	expectJson, err := json.Marshal(expect)
	if err != nil {
		log.Panic(err)
	}
	fmt.Printf("  stringCompare: %v, %v -  %T, %T \n", string(resultJson), string(expectJson), result, expect)
	return (strings.TrimSpace(string(resultJson)) == strings.TrimSpace(string(expectJson)))
}

//iterate through each field of struct and apply the compare function to each field based on compareType map
func equalField(result, expect interface{}, compMap map[string]compareType) error {

	u := reflect.ValueOf(expect)
	v := reflect.ValueOf(result)
	typeOfS := u.Type()

	for i := 0; i < u.NumField(); i++ {

		if !(compMap[typeOfS.Field(i).Name])(v.Field(i).Interface(), u.Field(i).Interface()) {
			return fmt.Errorf("Field: %s, Result: %v, Expect: %v", typeOfS.Field(i).Name, v.Field(i).Interface(), u.Field(i).Interface())
		}
	}
	return nil
}


//table specific 

<< range $table := .Tables >>
const << $table.Name >>tableName = "<< $table.Name >>"

//test data - note: double brackets in test data need space between otherwise are interpreted as template action
var test<< $table.CapSingName >> = [2]<< $table.CapSingName >>{ << $table.TestData 1 >>, << $table.TestData 2 >> }

var update<< $table.CapSingName >> = << $table.CapSingName >><< $table.TestData 1 >>

//compare functions
var compare<< $table.CapName >> = map[string]compareType{
<< $table.CompareMapFields >>
}

func reverse<< $table.CapName >>(<< $table.Name >> []<< $table.CapSingName >>) (result []<< $table.CapSingName >>) {

	for i := len(<< $table.Name >>) - 1; i >= 0; i-- {
		result = append(result, << $table.Name >>[i])
	}
	return
}

// ======= tests: << $table.CapSingName >> =======

func TestCreateTable<< $table.CapName >>(t *testing.T) {
	fmt.Println("==CreateTable<< $table.CapName >>")

	err := CreateTable<< $table.CapName >>(testDb)
	if err != nil {
		t.Errorf("cannot CreateTable<< $table.CapName >> " + err.Error())
	} else {
		fmt.Println("  Done: CreateTable<< $table.CapName >>")
	}
	exists, err := tableExists(testDb, << $table.Name >>tableName)
	if err != nil {
		t.Errorf("cannot tableExists " + err.Error())
	}
	if !exists {
		t.Errorf("tableExists(<< $table.Name >>) returned wrong status code: got %v want %v", exists, true)
	} else {
		fmt.Println("  Done: tableExists")
	}
}

func TestCreate<< $table.CapSingName >>(t *testing.T) {
	fmt.Println("==Create<< $table.CapSingName >>")

	result, err := test<< $table.CapSingName >>[0].Create<< $table.CapSingName >>(testDb)
	if err != nil {
		t.Errorf("cannot Create<< $table.CapSingName >> " + err.Error())
	} else {
		fmt.Println("  Done: Create<< $table.CapSingName >>")
	}

	err = equalField(result, test<< $table.CapSingName >>[0], compare<< $table.CapName >>)
	if err != nil {
		t.Errorf("api returned unexpected result. " + err.Error())
	}
}

func TestRetrieve<< $table.CapSingName >>(t *testing.T) {
	fmt.Println("==Retrieve<< $table.CapSingName >>")

	result, err := test<< $table.CapSingName >>[0].Retrieve<< $table.CapSingName >>(testDb)
	if err != nil {
		t.Errorf("cannot Retrieve<< $table.CapSingName >> " + err.Error())
	} else {
		fmt.Println("  Done: Retrieve<< $table.CapSingName >>")
	}
	err = equalField(result, test<< $table.CapSingName >>[0], compare<< $table.CapName >>)
	if err != nil {
		t.Errorf("api returned unexpected result. " + err.Error())
	}
}

func TestRetrieveAll<< $table.CapName >>(t *testing.T) {
	fmt.Println("==RetrieveAll<< $table.CapName >>")

	_, err := test<< $table.CapSingName >>[1].Create<< $table.CapSingName >>(testDb)
	if err != nil {
		t.Errorf("cannot Create<< $table.CapSingName >> " + err.Error())
	} else {
		fmt.Println("  Done: Create<< $table.CapSingName >>")
	}
	result, err := RetrieveAll<< $table.CapName >>(testDb)
	if err != nil {
		t.Errorf("cannot RetrieveAll<< $table.CapName >> " + err.Error())
	} else {
		fmt.Println("  Done: RetrieveAll<< $table.CapName >>")
	}

	//reverse because api is DESC, [:] is slice of all array elements
	expect := reverse<< $table.CapName >>(test<< $table.CapSingName >>[:])
	for i, _ := range expect {
		err = equalField(result[i], expect[i], compare<< $table.CapName >>)
		if err != nil {
			t.Errorf("api returned unexpected result. " + err.Error())
		}

	}

}


func TestUpdate<< $table.CapSingName >>(t *testing.T) {
	fmt.Println("==Update<< $table.CapSingName >>")

	result, err := update<< $table.CapSingName >>.Update<< $table.CapSingName >>(testDb)
	if err != nil {
		t.Errorf("cannot Update<< $table.CapSingName >> " + err.Error())
	} else {
		fmt.Println("  Done: Update<< $table.CapSingName >>")
	}
	err = equalField(result, update<< $table.CapSingName >>, compare<< $table.CapName >>)
	if err != nil {
		t.Errorf("api returned unexpected result. " + err.Error())
	}
}

<< end >>
//delete all data in reverse order to accommodate foreign keys
<< range $table := .ReverseTables >>

func TestDelete<< $table.CapSingName >>(t *testing.T) {
	fmt.Println("==Delete<< $table.CapSingName >>")

	err := test<< $table.CapSingName >>[0].Delete<< $table.CapSingName >>(testDb)
	if err != nil {
		t.Errorf("cannot Delete<< $table.CapSingName >> " + err.Error())
	} else {
		fmt.Println("  Done: Delete<< $table.CapSingName >>")
	}
	_, err = test<< $table.CapSingName >>[0].Retrieve<< $table.CapSingName >>(testDb)
	if err == nil {
		t.Errorf("api returned unexpected result: got Row want NoRow")
	} else {
		if err == sql.ErrNoRows {
			fmt.Println("  Done: Retrieve<< $table.CapSingName >> with no result")
		} else {
			t.Errorf("cannot Retrieve<< $table.CapSingName >> " + err.Error())
		}
	}
}

func TestDeleteAll<< $table.CapName >>(t *testing.T) {
	fmt.Println("==DeleteAll<< $table.CapName >>")

	err := DeleteAll<< $table.CapName >>(testDb)
	if err != nil {
		t.Errorf("cannot DeleteAll<< $table.CapName >> " + err.Error())
	} else {
		fmt.Println("  Done: DeleteAll<< $table.CapName >>")
	}
	result, err := RetrieveAll<< $table.CapName >>(testDb)

	if err != nil {
		t.Errorf("cannot RetrieveAll<< $table.CapName >> " + err.Error())
	}
	if len(result) > 0 {
		t.Errorf("api returned unexpected result: got Row want NoRow")
	} else {
		fmt.Println("  Done: RetrieveAll<< $table.CapName >> with no result")
	}
}
<< end >>